ActiveRecord::Enum
	Định nghĩa:
		Bạn có thể sử dụng phương thức enum để định nghĩa một thuộc tính là enumeration (kiểu enum), trong đó các giá trị 
		của thuộc tính này sẽ được ánh xạ tới các số nguyên trong cơ sở dữ liệu, nhưng bạn có thể truy vấn chúng bằng tên 
		biểu tượng tương ứng.
		
	Ví dụ:
		class Conversation < ActiveRecord::Base
		  enum status: {
		    active: 0,
		    archived: 1
		  }
		end
		
		
		conversation = Conversation.new
		conversation.status = :active # Thiết lập trạng thái bằng tên biểu tượng
		conversation.save!

		# Kiểm tra trạng thái
		conversation.active? # => true
		conversation.status  # => "active"

		conversation.status = :archived
		conversation.save!

		conversation.archived? # => true
		conversation.status    # => "archived"

		conversation.status = "archived" # Gán bằng chuỗi
		conversation.save!

		Conversation.active        # Lấy tất cả các cuộc trò chuyện đang active
		Conversation.not_active    # Lấy tất cả các cuộc trò chuyện không active
		Conversation.archived      # Lấy tất cả các cuộc trò chuyện đã được lưu trữ
		Conversation.not_archived  # Lấy tất cả các cuộc trò chuyện chưa được lưu trữ
		
		
	Bạn có linh hoạt để thực hiện truy vấn tùy chỉnh trực tiếp sử dụng giá trị thuộc tính hoặc số nguyên trong cơ sở dữ liệu.
	
		1. Truy vấn sử dụng giá trị thuộc tính trực tiếp:
			# Lấy các cuộc trò chuyện có trạng thái là active hoặc archived
			Conversation.where(status: [:active, :archived])

			# Lấy các cuộc trò chuyện có trạng thái không phải active
			Conversation.where.not(status: :active)
			
		2. Vô hiệu hóa phạm vi (scopes) cho enum:
			class Conversation < ActiveRecord::Base
			  enum :status, [:active, :archived], scopes: false
			end
			
			Điều này sẽ ngăn Rails tạo ra các phạm vi được định nghĩa trước như active, archived, vv., 
			cho phép bạn thực hiện các truy vấn trực tiếp như đã nêu trên.
			
		3. Thiết lập giá trị mặc định cho enum:

			class Conversation < ActiveRecord::Base
			  enum :status, [:active, :archived], default: :active
			end
			
			=> Điều này sẽ thiết lập giá trị mặc định cho thuộc tính status là :active khi khởi tạo một instance 
			mới của Conversation.
			
		4. Liên kết một cách rõ ràng giữa giá trị thuộc tính và số nguyên trong cơ sở dữ liệu:
		
			class Conversation < ActiveRecord::Base
			  enum :status, active: 0, archived: 1
			end
			
			=> Điều này liên kết một cách rõ ràng giữa các giá trị biểu tượng và số nguyên tương ứng của chúng trong 
			cơ sở dữ liệu cho thuộc tính status.
			
			
	- Sử dụng chuỗi để lưu trữ giá trị enum. Tuy nhiên, điều này có thể dẫn đến việc truy vấn cơ sở dữ liệu chậm hơn.
	
		Ví dụ 1:
			class Conversation < ActiveRecord::Base
			  enum :status, active: "active", archived: "archived"
			end
			
		Ví dụ 2:
			Conversation.where("status <> ?", Conversation.statuses[:archived])

			=> Lấy các cuộc hội thoại có status không phải là archived
			
		Ví dụ 3:
			class Conversation < ActiveRecord::Base
			  enum :status, [ :active, :archived ], suffix: true
			  enum :comments_status, [ :active, :inactive ], prefix: :comments
			end
			
			=> Đối với enum :status, các phương thức sẽ có hậu tố tên của enum (_status) khi bạn gọi chúng. Ví dụ:
			conversation.active_status!, conversation.archived_status?.
			 
			=> Đối với enum :comments_status, các phương thức sẽ có tiền tố được chỉ định (comments_) khi bạn gọi chúng. 
			Ví dụ: conversation.comments_active!, conversation.comments_inactive?.

		Ví dụ 4:
			class Conversation < ActiveRecord::Base
			  enum :status, [ :active, :archived ], instance_methods: false
			end
			
			=> Khi sử dụng enum :status trong instance của mô hình Conversation, các phương thức thông thường như active?,
			archived!, active!, archived?,... không sẽ không được tạo ra tự động. Điều này có thể hữu ích trong trường 
			hợp bạn không muốn có các phương thức này mặc định và muốn tùy chỉnh hoặc xử lý logic của mình khi sử dụng enum.
			
			
		Ví dụ 5:
			class Conversation < ActiveRecord::Base
			  enum :status, [ :active, :archived ], validate: true
			end
			
			
			conversation = Conversation.new(status: :invalid_status)
			conversation.valid? # => false, vì :invalid_status không thuộc danh sách giá trị cho enum :status
			
			
			=> Khi bạn đặt validate: true, Rails sẽ thêm validation để đảm bảo rằng giá trị được gán cho trường enum 
			phải thuộc danh sách các giá trị đã được xác định. Trong trường hợp này, :status chỉ có thể nhận một trong 
			các giá trị đã được định nghĩa là :active hoặc :archived.
			
			
		Ví dụ 6:
			class Conversation < ActiveRecord::Base
			  enum :status, [ :active, :archived ], validate: { allow_nil: true }
			end
			
			conversation = Conversation.new(status: nil)
			conversation.valid? # => true, vì { allow_nil: true } cho phép trường :status có thể là nil

			=> Cho phép nil là giá trị hợp lệ
			
			
		Ví dụ 7:
			class Conversation < ActiveRecord::Base
			  enum :status, [ :active, :archived ]
			end

			conversation = Conversation.new
			conversation.status = :unknown # 'unknown' is not a valid status (ArgumentError)
			
			
			=> Trong Ruby on Rails, khi sử dụng enums, việc cố gắng gán một giá trị enum không hợp lệ sẽ gây ra lỗi
			ArgumentError.
			
Active Record Nested Attributes
	Định nghĩa :
		 Trong Rails, "Nested Attributes" cho phép bạn lưu trữ các thuộc tính trên các bản ghi liên quan thông qua bản ghi cha.
		 Mặc định, việc cập nhật các nested attribute được tắt và bạn có thể bật nó bằng cách sử dụng phương thức lớp
		 accepts_nested_attributes_for.
		 
	Ví dụ:
		Một mô hình Book với hai mối quan hệ: has_one :author và has_many :pages. Bằng cách sử dụng
		accepts_nested_attributes_for :author, :pages, bạn đã cho phép việc sử dụng nested attributes 
		cho các mối quan hệ này.
		
		class Book < ActiveRecord::Base
		  has_one :author
		  has_many :pages

		  accepts_nested_attributes_for :author, :pages
		end
		
	Lưu ý:
		Tùy chọn :autosave sẽ tự động được kích hoạt trên mọi mối quan hệ mà accepts_nested_attributes_for được sử dụng cho.
		
		
	Mối quan hệ One-to-one
		Ví dụ:
			class Member < ActiveRecord::Base
			  has_one :avatar
			  accepts_nested_attributes_for :avatar
			end
			
			=> Member có một mối quan hệ has_one với Avatar và sử dụng accepts_nested_attributes_for để cho phép tạo 
			hoặc cập nhật Avatar thông qua Member.
			
			
			- Khi nested attributes được bật cho mối quan hệ one-to-one, bạn có thể tạo Member và Avatar cùng một lúc 
			thông qua các thông tin được cung cấp:
			params = { member: { name: 'Jack', avatar_attributes: { icon: 'smiling' } } }
			member = Member.create(params[:member])
			member.avatar.id # => 2
			member.avatar.icon # => 'smiling'


			- Đoạn mã này cho phép bạn cũng có thể cập nhật thông tin của Avatar thông qua Member:
			params = { member: { avatar_attributes: { id: '2', icon: 'sad' } } }
			member.update params[:member]
			member.avatar.icon # => 'sad'


			- Ngoài ra, nếu bạn muốn cập nhật Avatar hiện tại mà không cần cung cấp id, bạn cần thêm tùy chọn :update_only.
			class Member < ActiveRecord::Base
			  has_one :avatar
			  accepts_nested_attributes_for :avatar, update_only: true
			end
			
			- Sau khi đã thêm tùy chọn này, bạn có thể cập nhật Avatar hiện tại mà không cần cung cấp id như sau:
			params = { member: { avatar_attributes: { icon: 'sad' } } }
			member.update params[:member]
			member.avatar.id # => 2
			member.avatar.icon # => 'sad'
			
			
		:allow_destroy
		
			Định nghĩa:
				Cho phép bạn xóa đối tượng liên kết thông qua nested attributes.
				
			Ví dụ:
				class Member < ActiveRecord::Base
				  has_one :avatar
				  accepts_nested_attributes_for :avatar, allow_destroy: true
				end
				
				member.avatar_attributes = { id: '2', _destroy: '1' }
				member.avatar.marked_for_destruction? # => true
				member.save
				member.reload.avatar # => nil
				
				=>  (_destroy: '1') : 1 nghĩa là true, đối tượng có id 2 sẽ xóa
				
				=> (member.avatar.marked_for_destruction? ) kiểm tra xem đối tượng có được đánh dấu để xóa chưa
				
				=> (member.reload.avatar) chạy lại và kiểm tra, nếu avatar bị xóa thì nó sẽ trả về nil
				
	Mối quan hệ One-to-many
		Ví dụ:
			class Member < ActiveRecord::Base
			  has_many :posts
			  accepts_nested_attributes_for :posts
			end
			
			=> nested_attributes cho mỗi quan hệ 1 nhiều
			=> 1 thành viên có nhiều bài đăng
			
			
			params = { member: {
			  name: 'joe', posts_attributes: [
			    { title: 'Kari, the awesome Ruby documentation browser!' },
			    { title: 'The egalitarian assumption of the modern citizen' },
			    { title: '', _destroy: '1' } # phần này sẽ bị bỏ qua
			  ]
			}}

			member = Member.create(params[:member])
			member.posts.length # => 2
			member.posts.first.title # => 'Kari, the awesome Ruby documentation browser!'
			member.posts.second.title # => 'The egalitarian assumption of the modern citizen'
			
		Sử dụng :reject_if
			Định nghĩa:
				reject_if được sử dụng để chỉ định một Proc (tức là một hàm vô danh) để kiểm tra điều kiện và 
				từ chối bất kỳ bản ghi mới nào không đáp ứng điều kiện.
				
			Ví dụ:
				class Member < ActiveRecord::Base
				  has_many :posts
				  accepts_nested_attributes_for :posts, reject_if: proc { |attributes| attributes['title'].blank? }
				end

				params = { member: {
				  name: 'joe', posts_attributes: [
				    { title: 'Kari, the awesome Ruby documentation browser!' },
				    { title: 'The egalitarian assumption of the modern citizen' },
				    { title: '' } # phần này sẽ bị từ chối vì không đáp ứng điều kiện của :reject_if proc
				  ]
				}}

				member = Member.create(params[:member])
				member.posts.length # => 2
				member.posts.first.title # => 'Kari, the awesome Ruby documentation browser!'
				member.posts.second.title # => 'The egalitarian assumption of the modern citizen'
				
				
				=> reject_if sẽ từ chối bất kỳ trường nào có attributes['title'].blank?
				
		Sử dụng :reject_if với symbol	
			class Member < ActiveRecord::Base
			  has_many :posts
			  accepts_nested_attributes_for :posts, reject_if: :reject_posts

			  def reject_posts(attributes)
			    attributes['title'].blank?
			  end
			end
			
		
		Các nested attributes có khóa id tương ứng với bản ghi đã tồn tại sẽ được cập nhật thay vì tạo mới.
			member.attributes = {
			  name: 'Joe',
			  posts_attributes: [
			    { id: 1, title: '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!' },
			    { id: 2, title: '[UPDATED] other post' }
			  ]
			}

			member.posts.first.title # => '[UPDATED] An, as of yet, undisclosed awesome Ruby documentation browser!'
			member.posts.second.title # => '[UPDATED] other post'

		Dùng allow_destroy để xóa bản ghi liên quan
			class Member < ActiveRecord::Base
			  has_many :posts
			  accepts_nested_attributes_for :posts, allow_destroy: true
			end

			params = { member: {
			  posts_attributes: [{ id: '2', _destroy: '1' }]
			}}

			member.attributes = params[:member]
			member.posts.detect { |p| p.id == 2 }.marked_for_destruction? # => true
			member.posts.length # => 2
			member.save
			member.reload.posts.length # => 1
			
			=> (member.posts.detect { |p| p.id == 2 }.marked_for_destruction? # => true) 
			Tìm phần tử đầu tiên có id là 2 xem phần tử này có được đánh dấu để xóa chưa
			
		Nested attributes có thể được truyền dưới dạng một hash:
			Ví dụ:
				Member.create(
				  name: 'joe',
				  posts_attributes: {
				    first:  { title: 'Foo' },
				    second: { title: 'Bar' }
				  }
				)
				
			Tương đương với:
				Member.create(
				  name: 'joe',
				  posts_attributes: [
				    { title: 'Foo' },
				    { title: 'Bar' }
				  ]
				)
		
			=> Lưu ý:
				- các khóa của hash mà là giá trị cho :posts_attributes sẽ bị bỏ qua.
				- không được phép sử dụng 'id' hoặc :id làm một trong các khóa.
				
	
	Vấn đề Saving
		Trong Rails, khi bạn lưu một đối tượng cha chứa các đối tượng con (models), tất cả các thay đổi trong các đối tượng 
		con cũng được lưu và xóa tự động khi cần thiết. Quá trình này xảy ra trong giao dịch được bắt đầu bởi phương thức lưu 
		của đối tượng cha, và nó được quản lý bởi ActiveRecord::AutosaveAssociation.
		
	Creating forms with nested attributes
		Ví dụ:
			post members_path, params: {
			  member: {
			    name: 'joe',
			    posts_attributes: {
			      '0' => { title: 'Foo' },
			      '1' => { title: 'Bar' }
			    }
			  }
			}
			
			
ActiveRecord::CounterCache::ClassMethods
	decrement_counter
		Định nghĩa: 
			Phương thức decrement_counter trong Rails được sử dụng để giảm giá trị của một trường số nguyên trong 
			cơ sở dữ liệu thông qua một câu lệnh SQL trực tiếp.
			
		Cú pháp:
			decrement_counter(counter_name, id, by: 1, touch: nil)
			
		Dưới đây là một số thông tin về các tham số:
			- counter_name: Tên của trường mà bạn muốn giảm giá trị.
			
			- id: ID của đối tượng mà bạn muốn giảm giá trị, hoặc một mảng các ID nếu 
			bạn muốn giảm giá trị của nhiều đối tượng.
			
      			- by: Số lượng cần giảm giá trị. Mặc định là 1 nếu không được chỉ định.
      			
			- touch: Tùy chọn này giúp cập nhật timestamp của đối tượng khi thực hiện giảm giá trị. 
			Bạn có thể chỉ định true để cập nhật updated_at hoặc updated_on. Bạn cũng có thể chỉ định tên 
			của cột hoặc một mảng các tên cột để chỉ cập nhật các cột đó.
			
		Ví dụ:
			# Giảm giá trị cột posts_count cho bản ghi có id là 5
			DiscussionBoard.decrement_counter(:posts_count, 5)

			# Giảm giá trị cột posts_count cho bản ghi có id là 5
			# theo một số lượng cụ thể (ví dụ: 3)
			DiscussionBoard.decrement_counter(:posts_count, 5, by: 3)

			# Giảm giá trị cột posts_count cho bản ghi có id là 5
			# và cập nhật giá trị của updated_at
			DiscussionBoard.decrement_counter(:posts_count, 5, touch: true)
			

	increment_counter
		Định nghĩa: 
			Phương thức reset_counters trong Rails được sử dụng để thiết lập lại một hoặc nhiều bộ đếm (counter caches) 
			về giá trị chính xác của chúng bằng cách sử dụng một truy vấn SQL đếm (count query). Phương thức này hữu ích 
			khi bạn thêm mới các counter caches, hoặc nếu counter đã bị hỏng hoặc chỉnh sửa trực tiếp bằng SQL.	
			
		Cú pháp:
			reset_counters(id, *counters, touch: nil)
			
		Dưới đây là một số thông tin về các tham số:
			- id: ID của đối tượng mà bạn muốn đặt lại counter trên.
			
			- counters: Một hoặc nhiều counter của các mối quan hệ để đặt lại. 
			Bạn có thể sử dụng tên của mối quan hệ hoặc tên counter.
			
			- touch: Tùy chọn này giúp cập nhật timestamp của đối tượng khi thực hiện đặt lại counter.
			Bạn có thể chỉ định true để cập nhật updated_at hoặc updated_on. Bạn cũng có thể chỉ định tên 
			của cột hoặc một mảng các tên cột để chỉ cập nhật các cột đó.
			
		Ví dụ:
			# Đối với Post có id là #1, đặt lại giá trị của comments_count
			Post.reset_counters(1, :comments)

			# Tương tự như trên, nhưng cũng cập nhật updated_at và/hoặc updated_on
			Post.reset_counters(1, :comments, touch: true)
			
	
	update_counters
		Định nghĩa: 
			Phương thức update_counters trong Rails là một cách tổng quát để cập nhật các counter của một hoặc nhiều đối
			tượng thông qua truy vấn SQL trực tiếp. Phương thức này thường được sử dụng bởi increment_counter và
			decrement_counter, nhưng cũng có thể hữu ích khi sử dụng độc lập.	
			
		Cú pháp:
			update_counters(id, counters)
			
		Dưới đây là một số thông tin về các tham số:
			- id: ID của đối tượng mà bạn muốn cập nhật counter trên hoặc một mảng các ID nếu bạn muốn 
			cập nhật counter của nhiều đối tượng.
			
 			- counters: Một Hash chứa tên các trường mà bạn muốn cập nhật làm keys và số lượng cần cập nhật 
 			vào trường đó làm values.
 			
			- :touch (tùy chọn): Tùy chọn này giúp cập nhật timestamp của đối tượng khi thực hiện cập nhật 
			counter. Nếu tên các thuộc tính được truyền vào, chúng sẽ được cập nhật cùng với các thuộc tính 
			updated_at hoặc updated_on.
			
		Ví dụ:
			# Đối với Post có id là 5, giảm comments_count đi 1 và tăng actions_count lên 1
			Post.update_counters(5, comments_count: -1, actions_count: 1)

			# Đối với các Post có id là 10 và 15, tăng comments_count lên 1
			Post.update_counters([10, 15], comments_count: 1)

			# Đối với các Post có id là 10 và 15, tăng comments_count lên 1
			# và cập nhật giá trị updated_at cho mỗi `counter`.
			Post.update_counters([10, 15], comments_count: 1, touch: true)



			



				
			
			

			



			
	

		 




		

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


