Active Record Transactions
	- Định nghĩa: 
		Transactions cho phép bạn thực hiện một nhóm các thao tác cơ sở dữ liệu như tạo, cập nhật hoặc xóa các bản ghi và đảm 
		bảo rằng tất cả các thao tác trong nhóm đó sẽ được thực hiện hoặc không được thực hiện hoàn toàn. Nếu một trong số các
		thao tác trong giao dịch gặp lỗi, tất cả các thay đổi sẽ bị quay trở lại (rollback) và cơ sở dữ liệu sẽ không bị ảnh 
		hưởng, đảm bảo tính nhất quán và đồng nhất của dữ liệu.
		
	- Thực tế:
		Hãy tưởng tượng rằng chúng ta đang xây dựng một hệ thống ngân hàng cho phép mọi người chuyển tiền. Khi John Doe (ở
		Chicago) gửi $200 cho Jane Doe (ở London), chúng tôi thực hiện một số thao tác DB :
		
		1. Kiểm tra xem John Doe có \$200 trong tài khoản của anh ấy không.
		2. Ghi nợ tổng số tiền từ tài khoản của anh ấy.
		3. Đổi \$200 sang loại tiền tệ ưa thích của Jane Doe, là bảng Anh.
		4. Ghi có vào tài khoản của Jane Doe.
		
		Điều gì xảy ra nếu chương trình của chúng tôi gặp sự cố trong quá trình chuyển đổi tiền tệ?
		
		=>  Tiền tan biến trong không khí.
		
	
	- Ví dụ:
		ActiveRecord::Base.transaction do
		  david.withdrawal(100)
		  mary.deposit(100)
		end
		
		=> Bọc 2 giao dịch vào ttransaction
		
		=> Nếu có lỗi , dữ liệu sẽ trả lại  database mà không bị mất
		
		=> Nên việc rút tiền và chuển tiền sẽ an toàn hơn
		
		
Transaction cos thể làm việc nhiều đối tượng
	- Định nghĩa:
		Khi sử dụng phương thức transaction trên một lớp Active Record như Account.transaction, điều quan trọng cần hiểu là 
		giao dịch này không giới hạn trong việc chỉ làm việc với các đối tượng của lớp Account. Thay vào đó, bạn có thể thực 
		hiện các thao tác với các đối tượng thuộc các lớp Active Record khác nhau hoặc thậm chí là các đối tượng không phải 
		là Active Record trong cùng một giao dịch.
		
		
	- Ví dụ 1:
		Nếu bạn có một đối tượng balance thuộc lớp Balance và một đối tượng account thuộc lớp Account, bạn có thể lưu cả 
		hai trong một giao dịch duy nhất:
		
		Account.transaction do
		  balance.save!
		  account.save!
		end
		
		=> Mặc dù phương thức transaction được gọi trên lớp Account, nhưng bạn có thể thực hiện các hoạt động với cả balance 
		và account trong khối mã transaction đó. Cơ sở dữ liệu sẽ đảm bảo rằng cả hai hoạt động (balance.save! và account.save!)
		sẽ được thực hiện hoặc không có gì xảy ra với chúng nếu có lỗi xảy ra.
		
	- Ví dụ 2:
		Ngoài ra, bạn cũng có thể sử dụng phương thức transaction trên một thể hiện của lớp Active Record như sau:
		
		balance.transaction do
		  balance.save!
		  account.save!
		end
		
		=> Bạn có thể bao gồm các hoạt động trong một giao dịch, đảm bảo rằng các thay đổi đều được thực hiện hoặc quay trở 
		lại (rollback) nếu có lỗi, bất kể các đối tượng thuộc các lớp Active Record khác nhau hoặc không phải là Active Record.
		
		
Transactions không kết nối nhiều cơ sở dữ liệu
	ĐỊnh nghĩa:
		 Giao dịch (transactions) không có khả năng kết nối và quản lý nhiều kết nối cơ sở dữ liệu cùng một lúc. Mỗi giao dịch 
		 chỉ áp dụng trên một kết nối cơ sở dữ liệu duy nhất, không bao quát qua nhiều cơ sở dữ liệu hoặc nhiều kết nối.

	Ví dụ:
		 Nếu bạn có các lớp Student và Course liên quan đến các cơ sở dữ liệu khác nhau và bạn muốn thực hiện các thay đổi 
		 trong cả hai cơ sở dữ liệu trong một giao dịch, bạn không thể sử dụng giao dịch Active Record một cách trực tiếp để 
		 làm điều này.
		 
		 Student.transaction do
		  Course.transaction do
		    course.enroll(student)
		    student.units += course.units
		  end
		end
		
		=> Tuy nhiên, đây không phải là một giải pháp tốt vì giao dịch lồng nhau này chỉ tác động đến từng kết nối cơ sở dữ 
		liệu riêng biệt của mỗi lớp (Student và Course).
		
	Kết luận:
		Active Record không hỗ trợ trực tiếp việc quản lý giao dịch phân tán (fully distributed transactions) - tức là giao dịch
		bao gồm nhiều cơ sở dữ liệu hoặc kết nối khác nhau. Để thực hiện điều này, thường cần sử dụng các công cụ hoặc tính
		năng đặc biệt của cơ sở dữ liệu, như giao dịch phân tán, quản lý giao dịch phức tạp hoặc sử dụng các giải pháp bên 
		ngoài cho việc quản lý giao dịch phân tán, điều này vượt quá khả năng của Active Record.
		
Phương thức save và destroy
	Định nghĩa:
		Các phương thức save và destroy của Active Record được bao bọc trong một giao dịch (transaction) tự động. Điều này đảm 
		bảo rằng bất kỳ thay đổi nào bạn thực hiện trong quá trình kiểm tra hợp lệ (validations) hoặc các callbacks sẽ diễn ra
		trong phạm vi của giao dịch.
		
		
		Khi bạn sử dụng validations để kiểm tra các giá trị mà giao dịch phụ thuộc vào hoặc ném ra các exceptions trong các
		callbacks để quay trở lại (rollback) thay đổi, tất cả các thay đổi này sẽ được thực hiện trong phạm vi của giao dịch.
		
Xử lý ngoại lệ
	Định nghĩa:
		Việc xử lý các ngoại lệ (exceptions) đóng vai trò quan trọng để đảm bảo tính toàn vẹn của dữ liệu.
		
		1.  Ngoại lệ ném ra trong một khối giao dịch sẽ được lan truyền (propagate) sau khi kích hoạt ROLLBACK, do đó bạn 
		cần chuẩn bị để bắt các ngoại lệ này trong mã ứng dụng của bạn.
		
		2. Ngoại lệ ActiveRecord::Rollback sẽ kích hoạt ROLLBACK khi ném ra, nhưng không được ném lại bởi khối giao dịch. 
		Điều này cho phép bạn sử dụng ngoại lệ này để quay trở lại giao dịch mà không cần ném lại nó.
		
		3. Nên tránh việc bắt (catch) các ngoại lệ ActiveRecord::StatementInvalid bên trong một khối giao dịch. 
		Những ngoại lệ này thường chỉ ra rằng có lỗi xảy ra ở mức cơ sở dữ liệu, ví dụ như khi một ràng buộc duy nhất
		(unique constraint) bị vi phạm.
		
Nested transactions
	Định nghĩa:
		 Khi bạn gọi một transaction bên trong một transaction, các thao tác với cơ sở dữ liệu trong giao dịch con sẽ trở thành
		 một phần của giao dịch cha. Điều này có nghĩa là khi có lỗi xảy ra trong giao dịch con và bạn sử dụng
		 ActiveRecord::Rollback để quay trở lại, giao dịch cha sẽ không bị ảnh hưởng và giao dịch cha vẫn sẽ được commit.
		 
	Cách dùng:
		Để thực hiện ROLLBACK chỉ trên giao dịch con mà không ảnh hưởng đến giao dịch cha, bạn có thể sử dụng requires_new: true.
		Khi sử dụng điều này, nếu có lỗi xảy ra trong giao dịch con và ActiveRecord::Rollback được gọi, chỉ giao dịch con sẽ được
		ROLLBACK, trong khi giao dịch cha vẫn được duy trì. Điều này làm cho các thay đổi trong giao dịch con không ảnh hưởng đến
		giao dịch cha.
		
	Ví dụ:
		User.transaction do
		  User.create(username: 'Kotori')
		  User.transaction(requires_new: true) do
		    User.create(username: 'Nemu')
		    raise ActiveRecord::Rollback
		  end
		end
		
		=> Trong ví dụ này, chỉ có "Kotori" được tạo ra và giao dịch con đã bị ROLLBACK, không ảnh hưởng đến giao dịch cha
		
		=> Điều quan trọng cần lưu ý là hầu hết các cơ sở dữ liệu không hỗ trợ giao dịch lồng thực sự, và Active Record mô 
		phỏng chúng bằng cách sử dụng savepoints hoặc các kỹ thuật tương tự để quản lý việc lồng giao dịch.
		
		
Callbacks
	Định nghĩa:
		Có hai loại "callbacks" (hàm gọi lại) quan trọng liên quan đến việc lưu và hủy bỏ các giao dịch: after_commit và
		after_rollback
		
		
	after_commit:
		Được gọi sau mỗi lần lưu hoặc xóa dữ liệu trong một giao dịch ngay sau khi giao dịch được lưu vào cơ sở dữ liệu. 
		Đây là nơi lý tưởng để thực hiện các hành động như xóa bộ nhớ cache sau khi dữ liệu đã được cập nhật vào cơ sở dữ liệu.
		
	after_rollback:
		Được gọi sau mỗi lần lưu hoặc xóa dữ liệu trong một giao dịch ngay sau khi giao dịch hoặc điểm lưu gần nhất được quay 
		trở lại trạng thái trước đó. Được sử dụng để xử lý những thay đổi không được lưu do việc quay lại trạng thái trước 
		của cơ sở dữ liệu.
		
	






































	


