Introduction to I/O
	01. Streams
		Declare: 
							File I/O là viết tắt của File Input/Output, là việc đọc và ghi dữ liệu từ và 
							vào các tệp. Trong Ruby, file I/O được thực hiện thông qua lớp IO.
		Example: 
							fd = IO.sysopen("new-fd", "w")
							p IO.new(fd)

							io_streams = Array.new
							ObjectSpace.each_object(IO) { |x| io_streams << x }
							p io_streams
	02. Using the `File` Class
		Opening and closing
				Declare: 
									Dùng lệnh open để mở file và close để đóng file
				Example: 
									mode = "r+"
									file = File.open("/media/minhnv/Hoc tap/Internship_Report/test_io_file.txt", mode)
									puts file.inspect
									puts file.read
									file.close
				Example2:
									what_am_i = File.open("clean-slate.txt", "w") do |file|
									  file.puts "Call me Ishmael."
									end

									p what_am_i

									File.open("clean-slate.txt", "r") {|file| puts file.read }
		Reading and writing
				Declare: 
									Dùng lệnh open để mở file và close để đóng file
				Example: 
									file = File.open("master", "r+")
									p file.read
									file.rewind
									buffer = ""
									p file.read(23, buffer)
									p buffer
									file.close

				Example2:
									p File.read("monk")
									File.open("monk") do |f|
									  f.seek(20, IO::SEEK_SET)
									  p f.read(10)
									end

				Example2:
									lines = File.readlines("monk")
									p lines
									p lines[0]
Problems
	Build a calculator that 
	performs addition and subtraction
					Resolve: class Calculator
										  def add(a, b)
										    a  + b
										  end

										  def subtract(a, b)
										    a - b
										  end
										end
										p Calculator.new.add(1 , 5)
	Find the length of strings in an array
					Resolve: 
									def length_finder(input_array)
									  array_coppy = []

									  input_array.each do |value| 
									    array_coppy << value.length
									  end
									  
									  array_coppy
									end

									length_finder(['Ruby','Rails','C42'])
	Find the frequency of a string in a sentence
					Resolve:
									def find_frequency(sentence, word)
									  sentence.downcase.split.count(word.downcase)
									end

									find_frequency("Minh dep trai Minh", "Minh")
	Select random elements from an array
				Resolve:
								def random_select(array, n)
								  result = []
								  n.times do 
								    result << array[rand(array.length)]
								  end
								  result
								end


								random_select([1, 2, 3, 4, 5], 2)
	Hiring Programmers - Boolean Expressions in Ruby
				Resolve:
								is_an_experienced_programmer = (candidate.languages_worked_with.inclue? "Ruby") &&
								(candidate.years_of_experience >= 2 || candidate.github_points >= 500) && 
								!(candidate.age < 15 || candidate.applied_recently?)
	Palindromes
				Resolve:
								def palindrome?(sentence)
								  result = sentence.downcase.gsub(" ","").reverse
								  result == sentence.downcase.gsub(" ","")
								end

								palindrome?("Never odd or even")
	Compute sum of cubes for given range
				Resolve:
								def sum_of_cubes(a, b)
								 (1..3).inject(0) do |sum, x| sum += x**3 end
								end
								sum_of_cubes(1, 3)
	Find non-duplicate values in an Array
				Resolve:
								def sum_of_cubes(a, b)
								 (1..3).inject(0) do |sum, x| sum += x**3 end
								end
								sum_of_cubes(1, 3)
	Find non-duplicate values in an Array
				Resolve:
								def non_duplicated_values(values)
								  values.find_all do |number| values.count(number) == 1 end
								end

								non_duplicated_values([1,2,2,3,3,4,5])
	Check if all elements in an array are Fixnum
				Resolve:
								def array_of_fixnums?(array)
								  array.all? do |number| number.is_a?(Fixnum) end
								end
								array_of_fixnums?([1,2,3])
	Kaprekar's Number
				Resolve:
								def kaprekar?(k)
								  no_of_digits = k.to_s.size
								  p "check length: #{no_of_digits}"

								  square = (k ** 2).to_s
								  p "check square: #{square}"
								  
								  second_half = square[-no_of_digits..-1]
								  p "check second_half: #{second_half}"

								  first_half = square.size.even? ? square[0..no_of_digits-1] : square[0..no_of_digits-2]
								  p "check first_half: #{first_half}"
								  
								  k == first_half.to_i + second_half.to_i
								end

								kaprekar?(499500)
	Enough Contrast?
				Resolve:
								class Color
							  attr_reader :r, :g, :b
							  def initialize(r, g, b)
							    @r = r
							    @g = g
							    @b = b
							  end

							  def brightness_index
							    ( 299*r + 587*g + 114*b) / 1000
							  end

							  def brightness_difference(another_color)
							    (brightness_index - another_color.brightness_index).abs
							  end

							  def hue_difference(another_color)
							    (another_color.r - r).abs + (another_color.g - g).abs + (another_color.b - b).abs
							  end

							  def enough_contrast?(another_color)
							    brightness_difference(another_color) > 125 && hue_difference(another_color) > 500
							  end
							end

